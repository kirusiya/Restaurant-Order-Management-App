openapi: 3.0.0
info:
  title: Restaurant Order Management API
  version: 1.0.0
  description: |
    API RESTful para la gestión de órdenes y productos en un restaurante.
    Permite a los usuarios (meseros y administradores) interactuar con el sistema
    para crear, listar y actualizar productos y órdenes, así como gestionar usuarios
    y recibir notificaciones en tiempo real.

servers:
  - url: http://localhost:3000/api
    description: Servidor de desarrollo local
  - url: https://your-vercel-app-url.vercel.app/api # ¡IMPORTANTE! Reemplaza con la URL de tu aplicación desplegada en Vercel
    description: Servidor de producción

tags:
  - name: Authentication
    description: Operaciones de autenticación de usuarios
  - name: Users
    description: Gestión de usuarios (solo para administradores)
  - name: Categories
    description: Gestión de categorías de productos
  - name: Products
    description: Operaciones relacionadas con productos
  - name: Orders
    description: Operaciones relacionadas con órdenes
  - name: Push Notifications
    description: Gestión de suscripciones para notificaciones push

paths:
  /auth/login:
    post:
      summary: Iniciar sesión de usuario
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  description: Nombre de usuario
                  example: "admin"
                password:
                  type: string
                  description: Contraseña del usuario
                  example: "password123"
      responses:
        '200':
          description: Inicio de sesión exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Token JWT para autenticación
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Credenciales inválidas
        '500':
          description: Error interno del servidor

  /users:
    get:
      summary: Obtener todos los usuarios
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de usuarios obtenida exitosamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: No autorizado (token JWT inválido o ausente)
        '403':
          description: Prohibido (rol de usuario sin permisos)
        '500':
          description: Error interno del servidor
    post:
      summary: Crear un nuevo usuario
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
                - role
              properties:
                username:
                  type: string
                  description: Nombre de usuario único
                  example: "mesero1"
                password:
                  type: string
                  description: Contraseña del usuario
                  example: "securepass"
                role:
                  type: string
                  enum: [admin, mesero]
                  description: Rol del usuario (admin o mesero)
                  example: "mesero"
      responses:
        '201':
          description: Usuario creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Datos de entrada inválidos o usuario ya existente
        '401':
          description: No autorizado
        '403':
          description: Prohibido
        '500':
          description: Error interno del servidor

  /categories:
    get:
      summary: Obtener todas las categorías
      tags:
        - Categories
      responses:
        '200':
          description: Lista de categorías obtenida exitosamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '500':
          description: Error interno del servidor
    post:
      summary: Crear una nueva categoría
      tags:
        - Categories
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: Nombre de la categoría
                  example: "Bebidas"
      responses:
        '201':
          description: Categoría creada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Datos de entrada inválidos o categoría ya existente
        '401':
          description: No autorizado
        '403':
          description: Prohibido
        '500':
          description: Error interno del servidor

  /products:
    get:
      summary: Obtener todos los productos
      tags:
        - Products
      responses:
        '200':
          description: Lista de productos obtenida exitosamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Error interno del servidor
    post:
      summary: Crear un nuevo producto
      tags:
        - Products
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - price
                - category_id
              properties:
                name:
                  type: string
                  description: Nombre del producto
                  example: "Hamburguesa Clásica"
                price:
                  type: number
                  format: float
                  description: Precio del producto
                  example: 12.50
                category_id:
                  type: integer
                  description: ID de la categoría a la que pertenece el producto
                  example: 1
      responses:
        '201':
          description: Producto creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Datos de entrada inválidos
        '401':
          description: No autorizado
        '403':
          description: Prohibido
        '500':
          description: Error interno del servidor

  /orders:
    get:
      summary: Obtener todas las órdenes
      tags:
        - Orders
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [open, closed]
          description: Filtrar órdenes por estado (open o closed)
          required: false
      responses:
        '200':
          description: Lista de órdenes obtenida exitosamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          description: No autorizado
        '500':
          description: Error interno del servidor
    post:
      summary: Crear una nueva orden
      tags:
        - Orders
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - order_items
              properties:
                order_items:
                  type: array
                  minItems: 1
                  items:
                    type: object
                    required:
                      - product_id
                      - quantity
                      - item_price
                    properties:
                      product_id:
                        type: integer
                        description: ID del producto
                        example: 1
                      quantity:
                        type: integer
                        minimum: 1
                        description: Cantidad del producto
                        example: 2
                      item_price:
                        type: number
                        format: float
                        description: Precio unitario del producto en el momento de la orden
                        example: 12.50
      responses:
        '201':
          description: Orden creada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Datos de entrada inválidos (ej. order_items vacío o datos incorrectos)
        '401':
          description: No autorizado
        '500':
          description: Error interno del servidor

  /orders/{id}:
    put:
      summary: Actualizar el estado de una orden
      tags:
        - Orders
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID de la orden a actualizar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [open, closed]
                  description: Nuevo estado de la orden
                  example: "closed"
      responses:
        '200':
          description: Orden actualizada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Datos de entrada inválidos
        '401':
          description: No autorizado
        '403':
          description: Prohibido (solo admin/mesero puede cerrar órdenes)
        '404':
          description: Orden no encontrada
        '500':
          description: Error interno del servidor

  /subscribe-push:
    post:
      summary: Suscribir un cliente para notificaciones push
      tags:
        - Push Notifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - endpoint
                - keys
              properties:
                endpoint:
                  type: string
                  format: uri
                  description: URL del endpoint de la suscripción push
                  example: "https://fcm.googleapis.com/fcm/send/..."
                keys:
                  type: object
                  required:
                    - p256dh
                    - auth
                  properties:
                    p256dh:
                      type: string
                      description: Clave pública P256DH de la suscripción
                      example: "BPc_..."
                    auth:
                      type: string
                      description: Clave de autenticación de la suscripción
                      example: "y_..."
      responses:
        '200':
          description: Suscripción registrada exitosamente
        '400':
          description: Datos de suscripción inválidos
        '500':
          description: Error al registrar la suscripción

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Autenticación JWT (JSON Web Token)

  schemas:
    User:
      type: object
      properties:
        id:
          type: string # UUID in Supabase
          description: ID único del usuario
          readOnly: true
          example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
        username:
          type: string
          description: Nombre de usuario
          example: "admin"
        role:
          type: string
          enum: [admin, mesero]
          description: Rol del usuario
          example: "admin"
        created_at:
          type: string
          format: date-time
          description: Fecha y hora de creación del usuario
          readOnly: true
          example: "2023-10-27T10:00:00Z"
    Category:
      type: object
      properties:
        id:
          type: integer
          description: ID único de la categoría
          readOnly: true
          example: 1
        name:
          type: string
          description: Nombre de la categoría
          example: "Bebidas"
        created_at:
          type: string
          format: date-time
          description: Fecha y hora de creación de la categoría
          readOnly: true
          example: "2023-10-27T10:00:00Z"
    Product:
      type: object
      properties:
        id:
          type: integer
          description: ID único del producto
          readOnly: true
          example: 1
        name:
          type: string
          description: Nombre del producto
          example: "Pizza Pepperoni"
        price:
          type: number
          format: float
          description: Precio del producto
          example: 15.00
        created_at:
          type: string
          format: date-time
          description: Fecha y hora de creación del producto
          readOnly: true
          example: "2023-10-27T10:00:00Z"
        category_id:
          type: integer
          description: ID de la categoría a la que pertenece el producto
          example: 1
        category_name:
          type: string
          description: Nombre de la categoría (para visualización)
          readOnly: true
          example: "Pizzas"
    Order:
      type: object
      properties:
        id:
          type: integer
          description: ID único de la orden
          readOnly: true
          example: 101
        created_at:
          type: string
          format: date-time
          description: Fecha y hora de creación de la orden
          readOnly: true
          example: "2023-10-27T10:30:00Z"
        total:
          type: number
          format: float
          description: Precio total de la orden
          readOnly: true
          example: 30.00
        status:
          type: string
          description: Estado actual de la orden
          enum: [open, closed]
          example: "open"
        order_items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
          description: Lista de ítems en la orden
    OrderItem:
      type: object
      properties:
        order_id:
          type: integer
          description: ID de la orden a la que pertenece el ítem
          example: 101
        product_id:
          type: integer
          description: ID del producto en el ítem de la orden
          example: 1
        quantity:
          type: integer
          description: Cantidad del producto en el ítem de la orden
          example: 2
        item_price:
          type: number
          format: float
          description: Precio unitario del producto en el momento de la orden
          example: 15.00
        product_name:
          type: string
          description: Nombre del producto (para visualización)
          readOnly: true
          example: "Pizza Pepperoni"
